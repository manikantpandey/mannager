"""
This file is auto generated. Do not edit this file manually.
Source code: [monorepo]/contracts/generator.py
"""

import typing
from dataclasses import dataclass

CloudApiCliApiKeyInfoResponseAuthorId = str

CloudApiCliApiKeyInfoResponseProjectId = str

CloudApiCliApiKeyInfoResponseEmail = str

CloudApiCliApiKeyInfoResponseIntercomHash = str


@dataclass
class CloudApiCliApiKeyInfoResponse:
    author_id: CloudApiCliApiKeyInfoResponseAuthorId
    project_id: CloudApiCliApiKeyInfoResponseProjectId
    email: CloudApiCliApiKeyInfoResponseEmail
    intercom_hash: CloudApiCliApiKeyInfoResponseIntercomHash

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "authorId": self.author_id,
            "projectId": self.project_id,
            "email": self.email,
            "intercomHash": self.intercom_hash,
        }

    @staticmethod
    def from_dict(
        data: typing.Dict[str, typing.Any],
    ) -> "CloudApiCliApiKeyInfoResponse":
        return CloudApiCliApiKeyInfoResponse(
            author_id=str(data["authorId"]),
            project_id=str(data["projectId"]),
            email=str(data["email"]),
            intercom_hash=str(data["intercomHash"]),
        )


CloudApiCliBuildCreateResponseUrl = str

CloudApiCliBuildCreateResponseBuildId = str


@dataclass
class CloudApiCliBuildCreateResponse:
    url: CloudApiCliBuildCreateResponseUrl
    build_id: CloudApiCliBuildCreateResponseBuildId

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "url": self.url,
            "buildId": self.build_id,
        }

    @staticmethod
    def from_dict(
        data: typing.Dict[str, typing.Any],
    ) -> "CloudApiCliBuildCreateResponse":
        return CloudApiCliBuildCreateResponse(
            url=str(data["url"]),
            build_id=str(data["buildId"]),
        )


CommonUserId = str

CommonUserEmail = str

CommonUserRolesItem = str

CommonUserRoles = typing.List[CommonUserRolesItem]

CommonUserProjectId = str

CommonUserCreatedAt = str


@dataclass
class CommonUser:
    id: CommonUserId
    email: CommonUserEmail
    roles: CommonUserRoles
    project_id: CommonUserProjectId
    created_at: CommonUserCreatedAt

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "id": self.id,
            "email": self.email,
            "roles": self.roles,
            "projectId": self.project_id,
            "createdAt": self.created_at,
        }

    @staticmethod
    def from_dict(data: typing.Dict[str, typing.Any]) -> "CommonUser":
        return CommonUser(
            id=str(data["id"]),
            email=str(data["email"]),
            roles=[str(item) for item in data["roles"]],
            project_id=str(data["projectId"]),
            created_at=str(data["createdAt"]),
        )


CloudApiCliUserGetResponse = CommonUser

CommonRoleDescription = str

CloudApiCliRoleUpdateRequestDescription = CommonRoleDescription


@dataclass
class CloudApiCliRoleUpdateRequest:
    description: CloudApiCliRoleUpdateRequestDescription

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "description": self.description,
        }

    @staticmethod
    def from_dict(data: typing.Dict[str, typing.Any]) -> "CloudApiCliRoleUpdateRequest":
        return CloudApiCliRoleUpdateRequest(
            description=str(data["description"]),
        )


CommonRoleId = str

CommonRoleName = str

CommonRoleProjectId = str

CommonRoleCreatedAt = str


@dataclass
class CommonRole:
    id: CommonRoleId
    name: CommonRoleName
    description: typing.Optional[CommonRoleDescription]
    project_id: CommonRoleProjectId
    created_at: CommonRoleCreatedAt

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "id": self.id,
            "name": self.name,
            "description": self.description,
            "projectId": self.project_id,
            "createdAt": self.created_at,
        }

    @staticmethod
    def from_dict(data: typing.Dict[str, typing.Any]) -> "CommonRole":
        return CommonRole(
            id=str(data["id"]),
            name=str(data["name"]),
            description=str(data.get("description")),
            project_id=str(data["projectId"]),
            created_at=str(data["createdAt"]),
        )


CloudApiCliRoleUpdateResponse = CommonRole

CloudApiCliRoleListQueryOffset = int

CloudApiCliRoleListQueryLimit = int


@dataclass
class CloudApiCliRoleListQuery:
    offset: typing.Optional[CloudApiCliRoleListQueryOffset]
    limit: typing.Optional[CloudApiCliRoleListQueryLimit]

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "offset": self.offset,
            "limit": self.limit,
        }

    @staticmethod
    def from_dict(data: typing.Dict[str, typing.Any]) -> "CloudApiCliRoleListQuery":
        return CloudApiCliRoleListQuery(
            offset=int(data.get("offset", 0)),
            limit=int(data.get("limit", 10)),
        )


CloudApiCliRoleListResponseItem = CommonRole

CloudApiCliRoleListResponse = typing.List[CloudApiCliRoleListResponseItem]

CloudApiCliRoleCreateRequestName = CommonRoleName

CloudApiCliRoleCreateRequestDescription = CommonRoleDescription


@dataclass
class CloudApiCliRoleCreateRequest:
    name: CloudApiCliRoleCreateRequestName
    description: typing.Optional[CloudApiCliRoleCreateRequestDescription]

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "name": self.name,
            "description": self.description,
        }

    @staticmethod
    def from_dict(data: typing.Dict[str, typing.Any]) -> "CloudApiCliRoleCreateRequest":
        return CloudApiCliRoleCreateRequest(
            name=str(data["name"]),
            description=str(data.get("description")),
        )


CloudApiCliRoleCreateResponse = CommonRole

mannagerLibApiStageCardContentKey = str

mannagerLibApiStageCardContentValue = typing.Dict[str, typing.Any]

mannagerLibApiStageCardContentType = str


@dataclass
class mannagerLibApiStageCardContent:
    key: mannagerLibApiStageCardContentKey
    value: mannagerLibApiStageCardContentValue
    type: mannagerLibApiStageCardContentType

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "key": self.key,
            "value": self.value,
            "type": self.type,
        }

    @staticmethod
    def from_dict(data: typing.Dict[str, typing.Any]) -> "mannagerLibApiStageCardContent":
        return mannagerLibApiStageCardContent(
            key=str(data["key"]),
            value=dict(**data["value"]),
            type=str(data["type"]),
        )


mannagerLibApiStageCardContentsItem = mannagerLibApiStageCardContent

mannagerLibApiStageCardContents = typing.List[mannagerLibApiStageCardContentsItem]

mannagerLibApiStageRunId = str

mannagerLibApiStageRunStage = str

mannagerLibApiStageRunData = typing.Dict[str, typing.Any]

mannagerLibApiStageRunStatus = typing.Union[
    typing.Literal["waiting"],
    typing.Literal["running"],
    typing.Literal["processing"],
    typing.Literal["finished"],
    typing.Literal["failed"],
    typing.Literal["abandoned"],
]

mannagerLibApiStageRunStatusValues: typing.List[mannagerLibApiStageRunStatus] = [
    "waiting",
    "running",
    "processing",
    "finished",
    "failed",
    "abandoned",
]

mannagerLibApiStageRunCreatedAt = str

mannagerLibApiStageRunUpdatedAt = str

mannagerLibApiStageRunParentId = str

mannagerLibApiStageRunExecutionId = str


@dataclass
class mannagerLibApiStageRun:
    id: mannagerLibApiStageRunId
    stage: mannagerLibApiStageRunStage
    data: mannagerLibApiStageRunData
    status: mannagerLibApiStageRunStatus
    created_at: mannagerLibApiStageRunCreatedAt
    updated_at: mannagerLibApiStageRunUpdatedAt
    parent_id: typing.Optional[mannagerLibApiStageRunParentId]
    execution_id: typing.Optional[mannagerLibApiStageRunExecutionId]

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "id": self.id,
            "stage": self.stage,
            "data": self.data,
            "status": self.status,
            "created_at": self.created_at,
            "updated_at": self.updated_at,
            "parent_id": self.parent_id,
            "execution_id": self.execution_id,
        }

    @staticmethod
    def from_dict(data: typing.Dict[str, typing.Any]) -> "mannagerLibApiStageRun":
        return mannagerLibApiStageRun(
            id=str(data["id"]),
            stage=str(data["stage"]),
            data=dict(**data["data"]),
            status=data["status"],
            created_at=str(data["created_at"]),
            updated_at=str(data["updated_at"]),
            parent_id=str(data.get("parent_id")),
            execution_id=str(data.get("execution_id")),
        )


mannagerLibApiStageRunCardId = str

mannagerLibApiStageRunCardCreatedAt = str

mannagerLibApiStageRunCardUpdatedAt = str

mannagerLibApiStageRunCardAssignee = str

mannagerLibApiStageRunCardStatus = mannagerLibApiStageRunStatus

mannagerLibApiStageRunCardContent = mannagerLibApiStageCardContents

mannagerLibApiStageRunCardStage = str


@dataclass
class mannagerLibApiStageRunCard:
    id: mannagerLibApiStageRunCardId
    created_at: mannagerLibApiStageRunCardCreatedAt
    updated_at: typing.Optional[mannagerLibApiStageRunCardUpdatedAt]
    assignee: typing.Optional[mannagerLibApiStageRunCardAssignee]
    status: mannagerLibApiStageRunCardStatus
    content: mannagerLibApiStageRunCardContent
    stage: typing.Optional[mannagerLibApiStageRunCardStage]

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "id": self.id,
            "created_at": self.created_at,
            "updated_at": self.updated_at,
            "assignee": self.assignee,
            "status": self.status,
            "content": self.content,
            "stage": self.stage,
        }

    @staticmethod
    def from_dict(data: typing.Dict[str, typing.Any]) -> "mannagerLibApiStageRunCard":
        return mannagerLibApiStageRunCard(
            id=str(data["id"]),
            created_at=str(data["created_at"]),
            updated_at=str(data.get("updated_at")),
            assignee=str(data.get("assignee")),
            status=data["status"],
            content=[
                mannagerLibApiStageCardContent.from_dict(item) for item in data["content"]
            ],
            stage=str(data.get("stage")),
        )


mannagerLibApiStageRunCardsItem = mannagerLibApiStageRunCard

mannagerLibApiStageRunCards = typing.List[mannagerLibApiStageRunCardsItem]

mannagerLibApiStageId = str

mannagerLibApiStageType = typing.Union[
    typing.Literal["form"],
    typing.Literal["hook"],
    typing.Literal["job"],
    typing.Literal["script"],
    typing.Literal["iterator"],
    typing.Literal["condition"],
]

mannagerLibApiStageTypeValues: typing.List[mannagerLibApiStageType] = [
    "form",
    "hook",
    "job",
    "script",
    "iterator",
    "condition",
]

mannagerLibApiStageTitle = str

mannagerLibApiStagePath = str

mannagerLibApiStageCanBeStarted = bool


@dataclass
class mannagerLibApiStage:
    id: mannagerLibApiStageId
    type: mannagerLibApiStageType
    title: mannagerLibApiStageTitle
    path: typing.Optional[mannagerLibApiStagePath]
    can_be_started: mannagerLibApiStageCanBeStarted

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "id": self.id,
            "type": self.type,
            "title": self.title,
            "path": self.path,
            "can_be_started": self.can_be_started,
        }

    @staticmethod
    def from_dict(data: typing.Dict[str, typing.Any]) -> "mannagerLibApiStage":
        return mannagerLibApiStage(
            id=str(data["id"]),
            type=data["type"],
            title=str(data["title"]),
            path=str(data.get("path")),
            can_be_started=bool(data["can_be_started"]),
        )


mannagerLibApiKanbanColumnSelectedStage = mannagerLibApiStage

mannagerLibApiKanbanColumnStageRunCards = mannagerLibApiStageRunCards

mannagerLibApiKanbanColumnTotalCount = int

mannagerLibApiKanbanColumnLoading = bool


@dataclass
class mannagerLibApiKanbanColumn:
    selected_stage: mannagerLibApiKanbanColumnSelectedStage
    stage_run_cards: mannagerLibApiKanbanColumnStageRunCards
    total_count: mannagerLibApiKanbanColumnTotalCount
    loading: typing.Optional[mannagerLibApiKanbanColumnLoading]

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "selected_stage": self.selected_stage,
            "stage_run_cards": self.stage_run_cards,
            "total_count": self.total_count,
            "loading": self.loading,
        }

    @staticmethod
    def from_dict(data: typing.Dict[str, typing.Any]) -> "mannagerLibApiKanbanColumn":
        return mannagerLibApiKanbanColumn(
            selected_stage=mannagerLibApiStage.from_dict(data["selected_stage"]),
            stage_run_cards=[
                mannagerLibApiStageRunCard.from_dict(item)
                for item in data["stage_run_cards"]
            ],
            total_count=int(data["total_count"]),
            loading=bool(data.get("loading")),
        )


mannagerLibApiKanbanColumnsItem = mannagerLibApiKanbanColumn

mannagerLibApiKanbanColumns = typing.List[mannagerLibApiKanbanColumnsItem]

mannagerLibApiKanbanDataColumns = mannagerLibApiKanbanColumns


@dataclass
class mannagerLibApiKanbanData:
    columns: mannagerLibApiKanbanDataColumns

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "columns": self.columns,
        }

    @staticmethod
    def from_dict(data: typing.Dict[str, typing.Any]) -> "mannagerLibApiKanbanData":
        return mannagerLibApiKanbanData(
            columns=[
                mannagerLibApiKanbanColumn.from_dict(item) for item in data["columns"]
            ],
        )


mannagerLibApiThreadsStageRunCards = mannagerLibApiStageRunCards

mannagerLibApiThreadsNotFoundStagesItem = str

mannagerLibApiThreadsNotFoundStages = typing.List[mannagerLibApiThreadsNotFoundStagesItem]

mannagerLibApiThreadsTotalCount = int


@dataclass
class mannagerLibApiThreads:
    stage_run_cards: mannagerLibApiThreadsStageRunCards
    not_found_stages: mannagerLibApiThreadsNotFoundStages
    total_count: mannagerLibApiThreadsTotalCount

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "stage_run_cards": self.stage_run_cards,
            "not_found_stages": self.not_found_stages,
            "total_count": self.total_count,
        }

    @staticmethod
    def from_dict(data: typing.Dict[str, typing.Any]) -> "mannagerLibApiThreads":
        return mannagerLibApiThreads(
            stage_run_cards=[
                mannagerLibApiStageRunCard.from_dict(item)
                for item in data["stage_run_cards"]
            ],
            not_found_stages=[str(item) for item in data["not_found_stages"]],
            total_count=int(data["total_count"]),
        )


mannagerLibApiStagesItem = mannagerLibApiStage

mannagerLibApiStages = typing.List[mannagerLibApiStagesItem]

mannagerLibApiPlayerUserSignupEmail = CommonUserEmail


@dataclass
class mannagerLibApiPlayerUserSignup:
    email: mannagerLibApiPlayerUserSignupEmail

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "email": self.email,
        }

    @staticmethod
    def from_dict(data: typing.Dict[str, typing.Any]) -> "mannagerLibApiPlayerUserSignup":
        return mannagerLibApiPlayerUserSignup(
            email=str(data["email"]),
        )


mannagerLibApiPlayerUserNavigationGuardStatus = typing.Union[
    typing.Literal["ALLOWED"],
    typing.Literal["UNAUTHORIZED"],
    typing.Literal["FORBIDEN"],
    typing.Literal["NOT_FOUND"],
]

mannagerLibApiPlayerUserNavigationGuardStatusValues: typing.List[
    mannagerLibApiPlayerUserNavigationGuardStatus
] = ["ALLOWED", "UNAUTHORIZED", "FORBIDEN", "NOT_FOUND"]


@dataclass
class mannagerLibApiPlayerUserNavigationGuard:
    status: mannagerLibApiPlayerUserNavigationGuardStatus

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "status": self.status,
        }

    @staticmethod
    def from_dict(
        data: typing.Dict[str, typing.Any],
    ) -> "mannagerLibApiPlayerUserNavigationGuard":
        return mannagerLibApiPlayerUserNavigationGuard(
            status=data["status"],
        )


mannagerLibApiEditorLintersRuleName = str

mannagerLibApiEditorLintersRuleLabel = str

mannagerLibApiEditorLintersRuleType = typing.Literal["bug"]

mannagerLibApiEditorLintersRuleTypeValues: typing.List[
    mannagerLibApiEditorLintersRuleType
] = ["bug"]

mannagerLibApiEditorLintersIssueLabel = str

mannagerLibApiEditorLintersFixName = str

mannagerLibApiEditorLintersFixLabel = str


@dataclass
class mannagerLibApiEditorLintersFix:
    name: mannagerLibApiEditorLintersFixName
    label: mannagerLibApiEditorLintersFixLabel

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "name": self.name,
            "label": self.label,
        }

    @staticmethod
    def from_dict(data: typing.Dict[str, typing.Any]) -> "mannagerLibApiEditorLintersFix":
        return mannagerLibApiEditorLintersFix(
            name=str(data["name"]),
            label=str(data["label"]),
        )


mannagerLibApiEditorLintersIssueFixesItem = mannagerLibApiEditorLintersFix

mannagerLibApiEditorLintersIssueFixes = typing.List[
    mannagerLibApiEditorLintersIssueFixesItem
]


@dataclass
class mannagerLibApiEditorLintersIssue:
    label: mannagerLibApiEditorLintersIssueLabel
    fixes: mannagerLibApiEditorLintersIssueFixes

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "label": self.label,
            "fixes": self.fixes,
        }

    @staticmethod
    def from_dict(
        data: typing.Dict[str, typing.Any],
    ) -> "mannagerLibApiEditorLintersIssue":
        return mannagerLibApiEditorLintersIssue(
            label=str(data["label"]),
            fixes=[
                mannagerLibApiEditorLintersFix.from_dict(item) for item in data["fixes"]
            ],
        )


mannagerLibApiEditorLintersRuleIssuesItem = mannagerLibApiEditorLintersIssue

mannagerLibApiEditorLintersRuleIssues = typing.List[
    mannagerLibApiEditorLintersRuleIssuesItem
]


@dataclass
class mannagerLibApiEditorLintersRule:
    name: mannagerLibApiEditorLintersRuleName
    label: mannagerLibApiEditorLintersRuleLabel
    type: mannagerLibApiEditorLintersRuleType
    issues: mannagerLibApiEditorLintersRuleIssues

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "name": self.name,
            "label": self.label,
            "type": self.type,
            "issues": self.issues,
        }

    @staticmethod
    def from_dict(
        data: typing.Dict[str, typing.Any],
    ) -> "mannagerLibApiEditorLintersRule":
        return mannagerLibApiEditorLintersRule(
            name=str(data["name"]),
            label=str(data["label"]),
            type=data["type"],
            issues=[
                mannagerLibApiEditorLintersIssue.from_dict(item)
                for item in data["issues"]
            ],
        )


mannagerLibApiEditorEnvVarsModelName = str

mannagerLibApiEditorEnvVarsModelValue = str


@dataclass
class mannagerLibApiEditorEnvVarsModel:
    name: mannagerLibApiEditorEnvVarsModelName
    value: mannagerLibApiEditorEnvVarsModelValue

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "name": self.name,
            "value": self.value,
        }

    @staticmethod
    def from_dict(
        data: typing.Dict[str, typing.Any],
    ) -> "mannagerLibApiEditorEnvVarsModel":
        return mannagerLibApiEditorEnvVarsModel(
            name=str(data["name"]),
            value=str(data["value"]),
        )


mannagerLibApiEditorEnvVarsListResponseItem = mannagerLibApiEditorEnvVarsModel

mannagerLibApiEditorEnvVarsListResponse = typing.List[
    mannagerLibApiEditorEnvVarsListResponseItem
]

mannagerLibApiEditorEnvVarsCreateRequest = mannagerLibApiEditorEnvVarsModel

mannagerLibApiEditorEnvVarsCreateResponse = mannagerLibApiEditorEnvVarsModel

mannagerLibApiEditorLintersFixResponseSuccess = bool


@dataclass
class mannagerLibApiEditorLintersFixResponse:
    success: mannagerLibApiEditorLintersFixResponseSuccess

    def to_dict(self) -> typing.Dict[str, typing.Any]:
        return {
            "success": self.success,
        }

    @staticmethod
    def from_dict(
        data: typing.Dict[str, typing.Any],
    ) -> "mannagerLibApiEditorLintersFixResponse":
        return mannagerLibApiEditorLintersFixResponse(
            success=bool(data["success"]),
        )


mannagerLibApiEditorLintersCheckResponseItem = mannagerLibApiEditorLintersRule

mannagerLibApiEditorLintersCheckResponse = typing.List[
    mannagerLibApiEditorLintersCheckResponseItem
]
